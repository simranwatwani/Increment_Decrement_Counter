{"version":3,"sources":["reportWebVitals.js","components/Counter.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Counter","useState","num","setNum","start_num","setStartNum","end_num","setEndNum","class","id","value","onChange","event","target","onClick","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,qBC0DCQ,EA9DC,WAEZ,MAAqBC,mBAAS,KAA9B,mBAAOC,EAAP,KAAWC,EAAX,KACA,EAAgCF,mBAAS,KAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,QAArC,mBAAOK,EAAP,KAAeC,EAAf,KAmCA,OACI,mCACA,sBAAKC,MAAM,aAAX,UACI,8BACI,+DAGJ,sBAAKA,MAAM,UAAUC,GAAG,UAAxB,0BACgB,uBAAOC,MAAON,EAAWO,SAzC/B,SAACC,GACfP,EAAYO,EAAMC,OAAOH,UAuCrB,iBAEkB,uBAAOA,MAAOJ,EAASK,SAtClC,SAACC,GACZL,EAAUK,EAAMC,OAAOH,UAsCf,wBAAQI,QAfN,WACVX,EAAOC,IAcC,sBAGJ,sBAAKI,MAAM,iBAAiBC,GAAG,gBAA/B,UACA,wBAAQD,MAAM,2BAA2BM,QA5B/B,WACVZ,EAAME,EAEND,GAAQD,EAAI,GAGZa,QAAQC,IAAI,0BAsBZ,eACI,wBAAQR,MAAM,+BAAd,SAA8CN,IAC9C,wBAAQM,MAAM,4BAA4BM,QAzCpC,WACdC,QAAQC,IAAId,EAAII,IAEXJ,GAAOI,EAERH,GAAQD,EAAI,GAGZa,QAAQC,IAAI,yBAiCR,wBCrDhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B9B,K","file":"static/js/main.f9636a99.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\r\nimport './Count.css'\r\n\r\nconst Counter = () =>{\r\n\r\n    const [num,setNum] = useState('1');\r\n    const [start_num,setStartNum] = useState('1');\r\n    const [end_num,setEndNum] = useState('1000');\r\n\r\n    const setIntial = (event) => {\r\n        setStartNum(event.target.value);\r\n        \r\n    }\r\n    const setMax = (event) => {\r\n        setEndNum(event.target.value);\r\n        \r\n    }\r\n    const increment = () => {\r\n        console.log(num,end_num);\r\n       \r\n        if (+num < +end_num)\r\n        {\r\n            setNum(+num+1);\r\n        } \r\n        else {\r\n            console.log(\"Reached Maxium Value\");\r\n        }\r\n    }\r\n    const decrement = () => {\r\n        if (num > start_num)\r\n        {\r\n            setNum(+num-1);\r\n        } \r\n        else {\r\n            console.log(\"Reached Minimum Value\");\r\n        }\r\n    }\r\n    const reset = () => {\r\n        setNum(start_num);\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div class=\"parent-div\">\r\n            <div>\r\n                <h1>Increment Decrement Counter</h1>\r\n            </div>\r\n\r\n            <div class=\"user-in\" id=\"user-in\">\r\n               Intial Value <input value={start_num} onChange={setIntial}/>\r\n                Maximum Value <input value={end_num} onChange={setMax} />\r\n                <button onClick={reset}>Reset</button>    \r\n            </div>\r\n\r\n            <div class=\"handle-counter\" id=\"handleCounter\">\r\n            <button class=\"counter-plus btn btn-two\" onClick={decrement}>-</button>\r\n                <button class=\"counter-number btn btn-three\">{num}</button>\r\n                <button class=\"counter-minus btn btn-one\" onClick={increment}>+</button>\r\n            </div>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Counter\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport Counter from './components/Counter'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}